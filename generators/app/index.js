'use strict';
const Generator = require('yeoman-generator');
const chalk = require('chalk');
const yosay = require('yosay');
const fs = require('fs')
const relayOption = {
    mobx: {
      "mobx": "^3.3.1",
      "mobx-react": "^4.3.3",
    },
    redux: {
      "react-redux": "^5.0.6",
      "redux": "^3.7.2"
    }
  }
module.exports = class extends Generator {
  initializing() {
    this.log(chalk.yellow("**********************************************************"));
    // Have Yeoman greet the user.
    let greetWord = 'Welcome to Use ' + chalk.red.bold('generator-berton-react') + ' ' +
      chalk.blue('JerryBerton');
    this.log(yosay(greetWord));
    this.log(chalk.yellow("**********************************************************"));
  }
  prompting() {
    const prompts = [{
        type: 'input',
        name: 'name',
        message : 'Initialize the name of the project',
        default: 'react-demo'
      }, {
        type: 'input',
        name: 'author',
        message : 'The author of the project build',
        default: 'JerryBerton'
      }, {
        type: 'input',
        name: 'repository',
        message : 'Git repository url of the project',
        default: ' '
      }, {
        type: 'list',
        name: 'relay',
        message: 'The choice of state management library, Redux or Mobx',
        choices: ['redux', 'mobx']
      }, {
        type: 'confirm',
        name: 'gitignore',
        message: 'Generate gitignore files ?',
        default: true
      }, {
        type: 'confirm',
        name: 'readme',
        message: 'Whether to generate the README file ?',
        default: true
      }
    ];
    return this.prompt(prompts).then(props => {
      this.props = props;
    });
  }
  configuring() {
    let defaultSettings = this.fs.readJSON(this.templatePath('package.json'));
    let packageInfo = {
      name: this.props.name,
      private: true,
      version: '0.0.0',
      description: `${this.props.name} - Generated by generator-berton-react`,
      main: 'src/index.js',
      scripts: defaultSettings.scripts,
      repository: this.props.repository,
      keywords: ['react', 'redux', 'mobx'],
      author: this.props.author,
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    }
    packageInfo.dependencies = Object.assign(packageInfo.dependencies, 
      relayOption[this.props.relay])
    this.fs.writeJSON(this.destinationPath('package.json'), packageInfo);
  }
  writing() {
    // let rootDir = this.destinationRoot()
    // _rootDir = rootDir + '/' + this.props.name
    // fs.mkdirSync(_rootDir);
    let list = [
      {
        tPath: 'README.md',
        dPath: 'README.md',
        options: { name: this.props.name },
        copy: this.props.readme
      }, {
          tPath: 'webpack.config.js',
          dPath: 'webpack.config.js',
          copy: true
        }, {
        tPath: '.babelrc',
        dPath: '.babelrc',
        copy: true
      }, {
        tPath: '.eslintrc',
        dPath: '.eslintrc',
        copy: true
      }, {
        tPath: 'src/index.html',
        dPath: 'src/index.html',
        copy: true
      }, {
        tPath: 'src/index.js',
        dPath: 'src/index.js',
        copy: true
      }, {
        tPath: 'src/cfgs/dev.js',
        dPath: 'src/cfgs/dev.js',
        copy: true
      }, {
        tPath: 'src/cfgs/prod.js',
        dPath: 'src/cfgs/prod.js',
        copy: true
      }, {
        tPath: 'src/styles/index.scss',
        dPath: 'src/styles/index.scss',
        copy: true
      }, {
        tPath: 'src/reducer/README.md',
        dPath: 'src/reducer/README.md',
        copy: this.props.relay === 'redux'
      }, {
        tPath: 'src/actions/README.md',
        dPath: 'src/actions/README.md',
        copy: this.props.relay === 'redux'
      }, {
        tPath: 'src/models/README.md',
        dPath: 'src/models/README.md',
        copy: this.props.relay === 'mobx'
      }, {
        tPath: 'src/store/README.md',
        dPath: 'src/store/README.md',
        copy: true
      }, {
        tPath: 'src/components/App.js',
        dPath: 'src/components/App.js',
        copy: true
      }, {
        tPath: `src/components/Home.js`,
        dPath: 'src/components/Home.js',
        copy: true
      }
    ]
    list.filter(c => c.copy).forEach((item) => {
      if (item.options) {
        this.fs.copyTpl(
          this.templatePath(item.tPath),
          this.destinationPath(item.dPath),
          item.options
        )
      } else {
        this.fs.copy(
          this.templatePath(item.tPath),
          this.destinationPath(item.dPath)
        )
      }
    })
  }
  install() {
    this.log(chalk.yellow("Initialize the project is completed, you can choose to use NPM or YARN depend on installation"));
  }
};
